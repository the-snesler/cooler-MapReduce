# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import worker_pb2 as worker__pb2


class WorkerServiceStub(object):
    """WorkerService handles task execution and heartbeat from workers
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Heartbeat = channel.unary_unary(
                '/mapreduce.WorkerService/Heartbeat',
                request_serializer=worker__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=worker__pb2.HeartbeatResponse.FromString,
                )
        self.AssignTask = channel.unary_unary(
                '/mapreduce.WorkerService/AssignTask',
                request_serializer=worker__pb2.TaskAssignment.SerializeToString,
                response_deserializer=worker__pb2.TaskAck.FromString,
                )
        self.GetTaskStatus = channel.unary_unary(
                '/mapreduce.WorkerService/GetTaskStatus',
                request_serializer=worker__pb2.TaskStatusRequest.SerializeToString,
                response_deserializer=worker__pb2.TaskStatusResponse.FromString,
                )


class WorkerServiceServicer(object):
    """WorkerService handles task execution and heartbeat from workers
    """

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=worker__pb2.HeartbeatRequest.FromString,
                    response_serializer=worker__pb2.HeartbeatResponse.SerializeToString,
            ),
            'AssignTask': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignTask,
                    request_deserializer=worker__pb2.TaskAssignment.FromString,
                    response_serializer=worker__pb2.TaskAck.SerializeToString,
            ),
            'GetTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskStatus,
                    request_deserializer=worker__pb2.TaskStatusRequest.FromString,
                    response_serializer=worker__pb2.TaskStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mapreduce.WorkerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkerService(object):
    """WorkerService handles task execution and heartbeat from workers
    """

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mapreduce.WorkerService/Heartbeat',
            worker__pb2.HeartbeatRequest.SerializeToString,
            worker__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AssignTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mapreduce.WorkerService/AssignTask',
            worker__pb2.TaskAssignment.SerializeToString,
            worker__pb2.TaskAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mapreduce.WorkerService/GetTaskStatus',
            worker__pb2.TaskStatusRequest.SerializeToString,
            worker__pb2.TaskStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
